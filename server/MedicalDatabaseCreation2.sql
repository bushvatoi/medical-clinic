CREATE TABLE CLINIC(
	ClinicID		INT AUTO_INCREMENT,
    Address 		VARCHAR(30) NOT NULL,
    NumPatients 	INT,
    NumDoctors 		INT,
    PhoneNumber 	INT NOT NULL,
    PRIMARY	KEY(ClinicID)
);

CREATE TABLE DOCTOR(
	Fname			VARCHAR(15)	NOT NULL,
    Minit			CHAR,
    Lname			VARCHAR(15)	NOT NULL,
    Address 		VARCHAR(30),
    DoctorID 		INT AUTO_INCREMENT,
    PhoneNumber 	VARCHAR(15) NOT NULL,
    DOB				DATE,
    Email 			VARCHAR(50),
    Pass 		VARCHAR(200),
    ClinicID	INT,
    PRIMARY KEY (DoctorID),
    FOREIGN KEY (ClinicID) REFERENCES CLINIC(ClinicID)
);

CREATE TABLE PATIENT(
	PatientID 		INT AUTO_INCREMENT,
	Fname			VARCHAR(15) NOT NULL,
    Minit			VARCHAR(5),
    Lname			VARCHAR(15) NOT NULL,
    Address 		VARCHAR(100) NOT NULL,
    Email 			VARCHAR(50),
    SSN				CHAR(9),
    PhoneNumber 	VARCHAR(15) NOT NULL,
    Relation		VARCHAR(30),
    DOB				DATE NOT NULL,
    PrimePhysID		INT,
    Pass 		VARCHAR(200),
    UNIQUE (SSN),
    PRIMARY KEY (PatientID),
    FOREIGN KEY (PrimePhysID) REFERENCES DOCTOR	(DoctorID)
);


CREATE TABLE EMERGENCY_CONTACT(
	ContactID       INT,
	Fname			VARCHAR(15) NOT NULL,
    Minit			CHAR,
    Lname			VARCHAR(15) NOT NULL,
	DOB				DATE,
    Address 		VARCHAR(30),
    PhoneNumber 	VARCHAR(14) NOT NULL,
    Relationship	VARCHAR(30),
    PRIMARY KEY (ContactID),
    FOREIGN KEY (ContactID) REFERENCES DOCTOR(DoctorID),
    FOREIGN KEY (ContactID) REFERENCES PATIENT(PatientID)
);

CREATE TABLE MANAGER(
    ManagerID       INT AUTO_INCREMENT,
    Fname			VARCHAR(15) NOT NULL,
    Minit			VARCHAR(5),
    Lname			VARCHAR(15) NOT NULL,
    Email 			VARCHAR(30),
    Pass 		    VARCHAR(200),
    ClinicID        INT,
    PRIMARY KEY (ManagerID),
    FOREIGN KEY (ClinicID) REFERENCES CLINIC(ClinicID)
);

CREATE TABLE MEDICAL_CHART(
	PatientID		INT,
	Sex				VARCHAR(10) NOT NULL,
    BloodType		VARCHAR(10),
    Height			VARCHAR(15),
    Weight 			DOUBLE,
    FamilyHist		VARCHAR(50),
    SurgicalHist	VARCHAR(50),
    Allergies		VARCHAR(50),
    PRIMARY KEY (PatientID),
    FOREIGN KEY (PatientID) REFERENCES PATIENT (PatientID)
);

CREATE TABLE APPOINTMENT(
	AppointID		INT AUTO_INCREMENT,
    AppointDay      DATE,
	AppointTime		TEXT(15),
    DoctorID		INT,
    FName           TEXT(25) NOT NULL,
    LName           TEXT(25) NOT NULL,
    PatientID       INT,
    InsuranceProv	VARCHAR(15),
    Reason			VARCHAR(100),
    isDeleted       INT DEFAULT 0, /* Attribute so we can perform soft deletes, in case an appointment is cancelled, instead of completely deleting the entry*/
    ClinicID	INT,
    PRIMARY KEY (AppointID),
    FOREIGN KEY (DoctorID) REFERENCES DOCTOR (DoctorID)
);

CREATE TABLE APPOINTMENT_REPORT(
	AppointID		INT,
    Diagnosis		VARCHAR(100),
    Summary			VARCHAR(100),
    PRIMARY KEY (AppointID),
    FOREIGN KEY (AppointID) REFERENCES APPOINTMENT (AppointID)
);

DELIMITER $$
CREATE TRIGGER APPOINTMENT_TIME_VIOLATION_INS
BEFORE INSERT ON APPOINTMENT
FOR EACH ROW BEGIN 
	IF(NEW.AppointDay < CURDATE()) then
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'INVALID APPOINTMENT DATE!';
	END IF ;
END$$

DELIMITER ;

	   
DELIMITER $$
CREATE TRIGGER APPOINTMENT_TIME_VIOLATION_UPD
BEFORE UPDATE ON APPOINTMENT
FOR EACH ROW BEGIN 
	IF(NEW.AppointDay < CURDATE()) then
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'INVALID APPOINTMENT DATE!';
	END IF ;
END$$

DELIMITER ;


	   
DELIMITER $$
CREATE TRIGGER NUMBER_PATIENTS_AVAILABLE_INS
BEFORE INSERT ON PATIENT
FOR EACH ROW BEGIN 
	IF(NEW.DOB > CURDATE()) then
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'INVALID DOB!';
	END IF ;
END$$

DELIMITER ;

	   
DELIMITER $$
CREATE TRIGGER NUMBER_PATIENTS_AVAILABLE_UPD
BEFORE UPDATE ON PATIENT
FOR EACH ROW BEGIN 
	IF(NEW.DOB > CURDATE()) then
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'INVALID DOB!';
	END IF ;
END$$

DELIMITER ;
